# =============================================================
# PostSync Hook: registriert einen Workload Cluster in Argo CD
# =============================================================
apiVersion: batch/v1
kind: Job
metadata:
  name: register-cluster-to-argo
  namespace: argocd
  labels:
    gen: "1"
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation 
spec:
  template:
    spec:
      serviceAccountName: argocd-argocd-application-controller
      restartPolicy: Never
      containers:
      - name: register
        image: alpine/k8s:1.32.4
        env:
        ## Ab hier anpassen: TBD - später durch Kustomize
        - name: CLUSTER_NAME
          value: "gke-demo"      # <<— ersetze, z. B. "gke-demo"
        - name: CLUSTER_NS
          value: "team-a"        # <<— ersetze Namespace des Clusters
        - name: ENV_LABEL        # Umgebung (z. B. dev, prod)
          value: "dev"
        - name: TEAM_LABEL       # TeamKennung
          value: "a"


        command: ["/bin/bash","-c"]
        args:
        - |
          set -euo pipefail

          echo "[Hook] Registriere Cluster ${CLUSTER_NAME}"

          # 1) Kubeconfig Secret, das CAPI angelegt hat, auslesen
          kubectl -n ${CLUSTER_NS} get secret ${CLUSTER_NAME}-kubeconfig \
            -o jsonpath='{.data.value}' | base64 -d > /tmp/k.cfg

          # 2) API Server URL und CA Daten sauber aus dem Kubeconfig holen
          SERVER=$(kubectl --kubeconfig /tmp/k.cfg \
                   config view --minify --raw \
                   -o jsonpath='{.clusters[0].cluster.server}')

          CA=$(kubectl --kubeconfig /tmp/k.cfg \
                config view --minify --raw \
                -o jsonpath='{.clusters[0].cluster.certificate-authority-data}')

          echo "[Hook] API Server: $SERVER"

          # 3) ServiceAccount + ClusterRoleBinding im Workload Cluster anlegen
          cat <<EOF | kubectl --kubeconfig /tmp/k.cfg apply -f -
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: argocd-manager
            namespace: kube-system
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: argocd-manager
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin           # ggf. enger fassen
          subjects:
          - kind: ServiceAccount
            name: argocd-manager
            namespace: kube-system
          EOF

          # 4) BEARER‑TOKEN über TokenRequest-API erstellen (K8s ≥ 1.24)
          TOKEN=$(kubectl --kubeconfig /tmp/k.cfg -n kube-system create token argocd-manager --duration 8760h)

          # 5) Argo-CD-Config-JSON bauen
          CONFIG=$(jq -nc --arg t "$TOKEN" --arg ca "$CA" '{bearerToken:$t,tlsClientConfig:{insecure:false,caData:$ca}}')

          # 6) Argo CD Cluster Secret erstellen/aktualisieren
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: workload-cluster-secret-${CLUSTER_NAME}
            namespace: argocd
            labels:
              argocd.argoproj.io/secret-type: cluster
              cluster.capi.auto-register: "true"
              env: "${ENV_LABEL}"
              team: "${TEAM_LABEL}"
          type: Opaque
          stringData:
            name: "${CLUSTER_NAME}"
            server: "${SERVER}"
            config: '${CONFIG}'
          EOF

          echo "[Hook] Cluster Secret erfolgreich angelegt"
